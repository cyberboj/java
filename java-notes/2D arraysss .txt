2D Arrays

reminder: an array is a group of data consisting of the same type. so like an array of integers, an array of String words and stuff like that.

Arrays are considered objects in Java so we can also have an array of arrays. e.g.

// this is a 3 x 2 matrix; so 3 rows, 2 columns

[[1,1],[2,2],[3,3]];

this would print:
[1,1]
[2,2]
[3,3]

- we call this a 2D matrix because we can logically view this as a 2D matrix containing both rows and columns. 
- 2D arrays are useful for storing data in a spreadsheet.
- You can condense multiple arrays down to a single variable using 2D arrays. For example, if you have 10 students who each have 10 different quiz grades, you can represent the overall class quiz grades as a 10x10 2D array by having each row represent a student and each column represent one of the quizzes they have taken.
- 2D arrays can be used to map out data. For example, if you want to create a game of tic-tac-toe, you can represent the game state by using a 3x3 2D array.
- There are many other ways to use 2D arrays depending on the application. The only downside is that once initialized, no new rows or columns can be added or removed without copying the data to a newly initialized 2D array. This is because the length of arrays in Java are immutable (unable to be changed after creation).

Declaring 2D arrays:

int[] means we're declaring an array while int [][] means we're declaring an array of arrays so a 2D array would look like

	int[][] twoDArray;
	
Initializing 2D arrays:
	
	1D: 
	int[] prices = {13, 24, 38, 72, 9};
	
	or 
	
	int[] prices;
	prices = {13, 24, 38, 72, 9};
	
	
	
	2D:
	int[][] intArray1;
	intArray1 = new int[row][column];
		//so if we wanted 3 arrays with 5 elements each ( so a 3 by 5 matrix type of 3 rows and 5 columns), that'd be
	intArray1 = new int[3][5]; //this process is called defining the size of the array
	
- In Java, initializer lists are a way of initializing arrays and assigning values to them at the same time
		int[] prices = {13, 24, 38, 72, 9};
		
- We can use this for 2D arrays as well by creating an initializer list of initializer lists
	//for when the variable has not been declared 
	double[][] doubleValues = {{1.5, 2.6, 3.7}, {7.5, 6.4, 5.3}, {9.8,  8.7, 7.6}, {3.6, 5.7, 7.8}};
	
	//for when the variable has been declared and also for  assigning a new 2D array to an existing 2D array stored in a variable.
	String[][] stringValues;
stringValues = new String[][] {{"working", "with"}, {"2D", "arrays"}, {"is", "fun"}};
	
	
	Practice:
	
public class Exercise2 {
	public static void main(String[] args) {
    
		// Declare a 2d array of float values called floatTwoD
float[][] floatTwoD;

		// Initialize the 2d array from the last step to an empty 2d array consisting of 4 arrays with 10 elements each
		
floatTwoD = new float[4][10];

		// Declare and initialize an empty 2d array of integers consisting of 15 rows and 8 columns called dataChart
    
    int[][] dataChart = new int[15][8];
		
		// Create a 2D char array called ticTacToe representing the provided tic-tac-toe board. Use the characters 'X', 'O', and ' '.
    char[][] ticTacToe = {{'X','O','O'},{'O','X',' '},{'X',' ','X'}};
		
		// When no one is looking, you want to modify the game to where you, 'O', wins the game. Replace the game board so that all X’s are O’s and all O’s are X’s. Do this in one line with initializer lists.
    
    ticTacToe = new char[][]{{'O','X','X'},{'X','O',' '},{'O',' ','O'}};
    
    }
}


W0w@Pas$w0Rd


	Accessing elements in a 2D array:
	
for 1D:
 String[] words = {"cat", "dog", "apple", "bear", "eagle"};
 System.out.println(words[2]); //to print apples in index 2
 
 // Store the first element from the String array
String firstWord = words[0]; 
 
// Store the last element of the String array
String lastWord = words[words.length-1];
 
// Store an element from a different position in the array
String middleWord = words[2];

for 2D arrays though:

String[][] candy = {{"tom","tom"},{"pin","pop"},{"chewing","gum"}};
System.out.println(candy[1][0] + candy[1][1]); //to print out pinpop


	Modifying elements in a 2D array:
for 1D:
	storedArray[5] = 10;
	
for 2D:
	twoDArray[1][3] = 150;
	
	
	Review of Nested Loops:
traversing through 1D arrays:

		// Fix the outer loop header to iterate through the first array of seats
		for(int i = 0; i < seatsDayOne.length; i++) {

			// Fix the inner loop header to iterate through the second array of seats
			for(int j = 0; j < seatsDayTwo.length; j++) {

				// Replace 1==2 with conditional logic to check if an element in the first array matches an element in the second array
				if(seatsDayOne[i]==seatsDayTwo[j]) {
				

	 Traversing 2D Arrays:
 
