Access, Scope and Encapsulation

these decide what parts of your program can interact with specific variables or methods from other parts of your program.

Access:
- the 'public' and 'private' keywords relate to classes, variables, constructors and methods
- the concept of encapsulation
- accessor methods aka getters
- mutator methods aka setters


Scope:
- local variables vs instance variables
- this keyword


Encapsulatiton means to make sensitive data hidden from users by using private attributes and making get and set methods to access private variables

public get and set method can access private variables. get method retrieves the value while set method is to change/modify the value e.g. 

public class Main {
  private String name; // private = restricted access

  // Getter
  public String getName() {
    return name;
  }

  // Setter
  public void setName(String newName) {
    this.name = newName;
  }
}

NOTE: set method is always void

The scope of a variable is determined by where the variable is declared. For example, because instance variables are declared inside a class but outside any methods or constructors, all methods and constructors are within the scope of that variable.

class Dog{
  public String name;
  public int age;
  public int weight;
 
  public Dog(){
    name = "Winston";
    age = 8;
    weight = 30;
  }
 
 Dog method is using age, weight and name variables
 
 HOWEVER, if we have a variable declared inside a method, that variable can only be used inside that method. The same is true for parameters. The scope of those parameters is only the method they’re associated with. If you try to use a parameter outside the function it’s defined in, you’ll get an error. These variables are often called local variables. Note that we don’t use public or private when declaring local variables.
 
 This idea of scope extends to conditionals and loops as well. If you declare a variable inside the body of a conditional or in a loop, that variable can only be used inside that structure. This also includes the variable you’re using as your looping variable
 
 
