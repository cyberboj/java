while loop looks just likean if statement:

while (boys > 8) {

do thiss

}
while loop will keep running until condition isnt true anymore i.e. false

// set attempts to 0
int attempts = 0;
 
// enter loop if condition is true
while (passcode != 0524 && attempts < 4) {
 
  System.out.println("Try again.");
  passcode = getNewPasscode();
  attempts += 1;
 
  // is condition still true?
  // if so, repeat code block
}
// exit when condition is not true

infinite loops happen when condition'd nevr be false n they can crash your program

A counter (also known as an iterator) is a variable used in conditional logic of the loop and usually incremented in value during each iteration through the code. e.g.

// counter is initialized
int wishes = 0;
 
// conditional logic uses counter
while (wishes < 3) {
 
  System.out.println("Wish granted.");
  // counter is incremented
  wishes++;
 
}

we can also decrement counters

int pushupsToDo = 10;
 
while (pushupsToDo > 0) {
 
  doPushup();
  pushupsToDo--;
 
}


FOR LOOPS!!!! lISTEN UPPPP

A for loop has three parts:

for (int i=0; i<3; i++) {

sout("dsfgf");

}


1. int i = 0 is the initialization of the loop
2. i<3 is the boolean expression (true) // loop will continue to run till i is no longer 3
3. i++ is the increment/decrement statement //loop will increment at the end of each loop before condition is re-evaluated


iterate means to repeat same block of code


we have to be careful of how we write code to avoid "off by one" error


Traversing(or looping) a list of data is simply doing something with each item.  A loop should stop its traversal before its counter variable is equal to the length of the list.

to add value of a current item to something. e.g. setting items value to let's say "total" then

for (i = 0; i < cars.size(); i++) {

total += cars.get(i); // what we're doing here is setting total to be equal to individual items we have in the car list

}//end of loop

if you wanna exit a loop before it finishes it's iteration, we use keyword "break" e.g

for (int i = 0; i < 10; i++) {
  System.out.println(i);
  if (i == 4) {
    break;
  }
}

if we want to SKIP an iteration, we use keyword "continue" e.g. 

int[] numbers = {1, 2, 3, 4, 5};
 
for (int i = 0; i < numbers.length; i++) {
  if (numbers[i] % 2 == 0) {
    continue;
  }
  System.out.println(numbers[i]);
}

//this would skip even numbers and only print 1,3,5

If the return keyword was executed inside a loop contained in a method, then the loop iteration would be stopped and the method/constructor would be exited. e.g.

public static boolean checkForJacket(String[] lst) {
  for (int i = 0; i < lst.length; i++) {
    System.out.println(lst[i]);
    if (lst[i] == "jacket") {
      return true;
    }
  }
  return false;
} 
 
public static void main(String[] args) {
  String[] suitcase = {"shirt", "jacket", "pants", "socks"};   
  System.out.println(checkForJacket(suitcase));
}

our output would be shirt, jacket, true. so it returns true after finding what we were looking for

For each loops (also known as enhanced loops) allow us to directly loop through each item in a list of items (like an array or ArrayList) and perform some action with each item. e.g.

for (String inventoryItem : inventoryItems) {
  // Print element value
  System.out.println(inventoryItem);
 
}

: serves as "in" so String inventoryItem IN inventoryItems

to remove elements during traversal...we do so using the "while" loop. if we were removing elements from an arraylist during traversal, we'd run into problems because the index value would have to shift and adjust.

when using the while loop to remove an element, NEVER increment the while loops counter cuz doing so would skip that element

int i = 0; // initialize counter
 
while (i < lst.size()) {
  // if value is odd, remove value
  if (lst.get(i) % 2 != 0){
    lst.remove(i);
  } else {
    // if value is even, increment counter
    i++;
  }
}

similarly, we can use a for loop as well., but this time around we have to INCREMENT our loop control variable.

for (int i = 0; i < lst.size(); i++) {
  if (lst.get(i) == "value to remove"){
    // remove value from ArrayList
    lst.remove(lst.get(i));
    // Decrease loop control variable by 1
    i--;    
  }
}

 Avoid manipulating the size of an ArrayList when using an enhanced for loop. Actions like adding or removing elements from an ArrayList when using a for each loop can cause a ConcurrentModifcationException error.
 
 


