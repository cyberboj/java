Column-major order:

- this refers to the traversal path that moves vertically down each column starting at the first column and ending with the last.
- in order to perform column-major traversal, we need to change the outer loop from depending on the number of rows, to depending on the number of columns. Likewise we need the inner loop to depend on the number of rows in its termination condition. e.g.

        int matrix[][] = {
                {52,74,73,90},
                {80,88,92,86},
                {0,0,85,88},
                {91,93,90,100}
        };

        int quiz1 = 0;

        for (int a = 0; a < matrix[0].length; a++) {  //termination condition is length of column

            quiz1 = 0;

            for (int b = 0; b < matrix.length; b++) { //termination condition is length of row

                quiz1 = matrix[a][0];                 //quiz 1 is the first element in every row

            }//row
            System.out.println("student " + (a+1) + "'s results for first quiz: " + quiz1); //a+1 so that it prints student 1 instead of student 0
        }//column


Algorithm:
//	rows = matrix.length
//	columns = matrix[i].length

for loop for row-major order:

	for (int a = 0; a < matrix.length; a ++) {
	   for (int b = 0; b < matrix[a].length; b++) {
	   
	   whatever = matrix[a][b];  
	   
	   }//inner loop
	   }//outer loop
	   
   
for loop for column-major order:

	for (int a = 0; a < matrix[0].length; a++) { // a < matrix[0].length means we're starting with the first column
		for (int b = 0; b < matrix.length; b++) { 
		
		whatever you want = matrix[a][b];
		
		}//inner loop
	}//outer loop
		
		
/* to access first element in every row, whatever = matrix[a][0];
 * to access first element in every colu