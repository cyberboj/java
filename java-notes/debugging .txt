* Syntax error = issue with wording. could be missing ';'
* Run-time error = when a program with no compile-time errors asks the computer to do something that the computer is unable to reliably do.
	Some common run-time errors:
	Division by zero also known as division error
	Trying to open a file that doesn’t exist
There is no way for the compiler to know about these kinds of errors when the program is compiled.

Here’s an example of a run-time error message:

	Exception in thread "main" java.lang.ArithmeticException: / by zero at 
	Debug.main(Debug.java:8)
	
	
* Exceptions = the conditions that occur at runtime and may cause the termination of the program.
		When an exception occurs, Java displays a message that includes the name of the exception, the line of the 
		program where the exception occurred, and a stack trace. The stack trace includes:
	
	The method that was running
	The method that invoked it
	The method that invoked that one
	and so on…
	Make sure to examine it.
	
	Some common exceptions that you will see in the wild:
	
	ArithmeticException: Something went wrong during an arithmetic operation; for example, division by zero.
	NullPointerException: You tried to access an instance variable or invoke a method on an object that is currently 
	null.
	ArrayIndexOutOfBoundsException: The index you are using is either negative or greater than the last index of the 
	array (i.e., array.length-1).
	FileNotFoundException: Java didn’t find the file it was looking for.
	
* Exception Handling = 

	One way to handle exceptions is using the try/catch:
	
	The try statement allows you to define a block of code to be tested for errors while it is being executed.
	
	The catch statement allows you to define a block of code to be executed if an error occurs in the try block.
	
	The try and catch keywords come in pairs, though you can also catch several types of exceptions in a single block:
	
	try {
	 
	  //  Block of code to try
	 
	} catch (NullPointerException e) {
	 
	  // Print the error message like this:
	  System.err.println("NullPointerException: " + e.getMessage());
	 
	  // Or handle the error another way here
	 
	}
	Notice how we used System.err.println() here instead of System.out.println(). System.err.println() will print to the standard 
	error and the text will be in red.
	
	You can also chain exceptions together:
	
	try {
	 
	  //  Block of code to try
	 
	} catch (NullPointerException e) {
	 
	  //  Code to handle a NullPointerException
	 
	} catch (ArithmeticException e) {
	 
	  //  Code to handle an ArithmeticException
	 
	}
	
e.g.

public class Debug {

  public static void main(String[] args) {
    
    int width = 0;
    int length = 40;
    
    try {
      
      int ratio = length / width;
      
    } catch (ArithmeticException e) {
      
      System.err.println("ArithmeticException: " + e.getMessage());
      
    }
    
  }
  
}


* Logic errors = when there is a design flaw in your program. These types of errors which provide incorrect output, but appears to be error-free, are called logic errors.